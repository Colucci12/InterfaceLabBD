--:: CRIACAO DE TABELAS E VIEWS) //////////////////////////////////////////////////////////////////////////////////

/*
Tabela dos usuarios conforme solicitado no enunciado
*/
CREATE TABLE USERS (
    Userid NUMBER GENERATED BY DEFAULT AS IDENTITY,
    Password VARCHAR2(32) NOT NULL,
    IdLider CHAR(14) UNIQUE,
    CONSTRAINT PK_USERS PRIMARY KEY (Userid),
    CONSTRAINT FK_USERS_LIDER FOREIGN KEY (IdLider) REFERENCES LIDER(CPI)
);

/*
Tabela de log conforme solicitado no enunciado
*/
CREATE TABLE LOG_TABLE (
    Userid NUMBER,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    message VARCHAR2(255),
    CONSTRAINT FK_LOG_TABLE_USERS FOREIGN KEY (Userid) REFERENCES USERS(Userid)
);

/*
View com os dados necessarios para o login e verificacao de cargos dentro da plataforma
Aqui conferimos se o usuario e lider de uma faccao ou nao, e o seu cargo.
*/
CREATE OR REPLACE VIEW VIEW_LOGIN AS
SELECT
    u.Userid AS ID_Usuario,
    u.Password AS Senha,
    l.CPI AS CPI_Lider,
    l.NOME AS Nome_Lider,
    l.CARGO AS Cargo_Lider,
    CASE
        WHEN f.LIDER IS NOT NULL THEN 'TRUE'
        ELSE 'FALSE'
    END AS Eh_Lider_Faccao
FROM
    USERS u
    JOIN LIDER l ON u.IdLider = l.CPI
    LEFT JOIN FACCAO f ON l.CPI = f.LIDER;





--:: CRIACAO DE TRIGGERS) //////////////////////////////////////////////////////////////////////////////////

/*
Trigger de encriptografia de senhas
*/
CREATE OR REPLACE TRIGGER TRG_USERS_MD5
BEFORE INSERT OR UPDATE ON USERS
FOR EACH ROW
BEGIN
    :NEW.Password := LOWER(
        RAWTOHEX(
            DBMS_OBFUSCATION_TOOLKIT.md5(
                input => UTL_I18N.STRINGTO_RAW(:NEW.Password, 'AL32UTF8')
            )
        )
    );
END;

/*
Trigger para inserir um lider na tabela usuario assim que ele for criado
*/
CREATE OR REPLACE TRIGGER TRG_CREATE_USER_ON_NEW_LIDER
AFTER INSERT ON LIDER
FOR EACH ROW
BEGIN
    -- Call the CreateUser procedure with the new leader's CPI and a default password
    CreateUser(:NEW.CPI, 'senha_padrao');
END;





--:: CRIACAO DE PROCEDURES) //////////////////////////////////////////////////////////////////////////////////

/*
Procedure para criar um usuario
*/
CREATE OR REPLACE PROCEDURE CreateUser(
    p_IdLider CHAR,
    p_Password VARCHAR2
) IS
    v_count NUMBER;
BEGIN
    -- Check if the leader already exists in the USERS table
    SELECT COUNT(1) INTO v_count
    FROM USERS
    WHERE IdLider = p_IdLider;

    IF v_count = 0 THEN
        INSERT INTO USERS (Password, IdLider)
        VALUES (
            LOWER(
                RAWTOHEX(
                    DBMS_OBFUSCATION_TOOLKIT.md5(
                        input => UTL_I18N.STRING_TO_RAW(p_Password, 'AL32UTF8')
                    )
                )
            ),
            p_IdLider
        );
    ELSE
        RAISE_APPLICATION_ERROR(-20001, 'Leader already has a user account.');
    END IF;
END;

/*
Procedure para colocar todos os lideres antigos na tabela de usuario
*/
CREATE OR REPLACE PROCEDURE InsertMissingLidersToUsers IS
BEGIN
    FOR r IN (
        SELECT CPI
        FROM LIDER
        WHERE CPI NOT IN (SELECT IdLider FROM USERS)
    ) LOOP
        INSERT INTO USERS (Password, IdLider)
        VALUES (
            LOWER(
                RAWTOHEX(
                    DBMS_OBFUSCATION_TOOLKIT.md5(
                        input => UTL_I18N.STRING_TO_RAW('senha_padrao', 'AL32UTF8')
                    )
                )
            ),
            r.CPI
        );
    END LOOP;
END;

/*
Procedure para passar os dados de login para a interface
*/
CREATE OR REPLACE PROCEDURE USER_LOGIN (
    p_userid IN USERS.Userid%TYPE,
    p_password IN USERS.Password%TYPE,
    p_status_code OUT NUMBER
) IS
    v_password USERS.Password%TYPE;
    v_encrypted_password VARCHAR2(32);
BEGIN
    -- Criptografar a senha fornecida usando DBMS_OBFUSCATION_TOOLKIT.md5
    v_encrypted_password := LOWER(
        RAWTOHEX(
            DBMS_OBFUSCATION_TOOLKIT.md5(
                input => UTL_I18N.STRING_TO_RAW(p_password, 'AL32UTF8')
            )
        )
    );

    -- Verificar se o usuário existe e obter a senha criptografada
    SELECT Password INTO v_password
    FROM USERS
    WHERE Userid = p_userid;

    -- Verificar se a senha criptografada está correta
    IF v_password = v_encrypted_password THEN
        InsertLog(p_Userid, 'Usuário logado');
        p_status_code := 200; -- Login bem-sucedido
    ELSE
        p_status_code := 401; -- Senha incorreta
        InsertLog(p_Userid, 'Tentativa de login do usuário falhou');
    END IF;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        p_status_code := 404; -- Usuário não encontrado
    WHEN OTHERS THEN
        p_status_code := 500; -- Outro erro
END;

/*
Procedure para passar os dados de overview para a interface
*/
CREATE OR REPLACE PROCEDURE overview(
    p_userid IN USERS.Userid%TYPE,
    p_cursor OUT SYS_REFCURSOR
) IS
BEGIN
    OPEN p_cursor FOR
    SELECT 
        ID_Usuario,
        CPI_Lider,
        Nome_Lider,
        Cargo_Lider,
        Eh_Lider_Faccao
    FROM VIEW_LOGIN
    WHERE ID_Usuario = p_userid;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20001, 'Usuário não encontrado.');
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20002, 'Erro ao recuperar dados do usuário: ' || SQLERRM);
END overview;

/*
Procedure para inserir um log na tabela de log
*/
CREATE OR REPLACE PROCEDURE InsertLog(
    p_Userid NUMBER,
    p_Message VARCHAR2
) IS
BEGIN
    INSERT INTO LOG_TABLE (Userid, message)
    VALUES (p_Userid, p_Message);
END;